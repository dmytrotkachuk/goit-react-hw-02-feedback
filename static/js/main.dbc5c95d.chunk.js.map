{"version":3,"sources":["components/Statistics/index.js","components/FeedbackOptions/index.js","components/Section/index.js","components/Notification/index.js","components/Feedback/index.js","App.js","serviceWorker.js","index.js"],"names":["Statistics","good","neutral","bad","total","positiveFeedback","FeedbackOptions","options","onLeaveFeedback","map","option","name","key","onClick","Section","title","children","Notification","message","Feedback","state","handleClick","e","preventDefault","target","setState","countTotalFeedback","this","countPositiveFeedbackPercentage","toFixed","className","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"6QAgBeA,EAdI,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,iBAE5C,OACA,4BACI,qCAAWJ,GACX,wCAAcC,GACd,oCAAUC,GACV,sCAAYC,GACZ,kDAAwBC,EAAxB,OCYOC,EAlBS,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,QAAQC,EAAqB,EAArBA,gBAE9B,OAAQ,oCACHD,EAAQE,KAAI,SAACC,GAAD,OACT,4BAAQC,KAAMD,EAAOC,KAAMC,IAAKF,EAAOE,IAAKC,QAASL,GAChDE,EAAOC,WCSTG,EAfC,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,MAAMC,EAAa,EAAbA,SACpB,OACI,oCACA,4BAAKD,GACJC,ICMMC,EAVM,SAAC,GAAc,IAAbC,EAAY,EAAZA,QACnB,OACI,4BAAKA,ICEQC,E,4MAGbC,MAAQ,CACJnB,KAAM,EACNC,QAAS,EACTC,IAAK,EACLC,MAAM,EACNC,iBAAiB,G,EAMzBgB,YAAc,SAAAC,GACVA,EAAEC,iBADa,IAERZ,EAAQW,EAAEE,OAAVb,KACP,EAAKc,SAAL,eAAgBd,EAAM,EAAKS,MAAMT,GAAM,GAAI,EAAKe,qB,mEAK/B,IAAD,EACaC,KAAKP,MAC5BhB,EAFU,EACTH,KADS,EACHC,QADG,EACMC,IAGtBwB,KAAKF,SAAS,CAACrB,MAAOA,GAAQuB,KAAKC,mC,wDAIL,IAAD,EACPD,KAAKP,MAApBnB,EADsB,EACtBA,KAAMG,EADgB,EAChBA,MACbuB,KAAKF,SAAS,CAACpB,kBAAmBJ,EAAKG,EAAM,KAAKyB,QAAQ,O,+BAoB1D,OACI,yBAAKC,UAAU,YACf,kBAAC,EAAD,CAASf,MAAM,8BACX,kBAAC,EAAD,CAAiBR,QAlBT,CAChB,CACAI,KAAM,OACNC,IAAM,GAEN,CACAD,KAAM,UACNC,IAAI,GAEJ,CACAD,KAAK,MACLC,IAAI,IAOuCJ,gBAAiBmB,KAAKN,eAG7D,kBAAC,EAAD,CAASN,MAAM,cACbY,KAAKP,MAAMhB,MAAQ,EACrB,kBAAC,EAAD,CACQH,KAAQ0B,KAAKP,MAAMnB,KACnBC,QAAWyB,KAAKP,MAAMlB,QACtBC,IAAOwB,KAAKP,MAAMjB,IAClBC,MAASuB,KAAKP,MAAMhB,MACpBC,iBAAoBsB,KAAKP,MAAMf,mBAE/B,kBAAC,EAAD,CAAca,QAAQ,4B,GAnEJa,IAAMC,W,MCK7BC,MARf,WACE,OACE,yBAAKH,UAAU,OACb,kBAAC,EAAD,QCKcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMhC,a","file":"static/js/main.dbc5c95d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Statistics = ({good, neutral, bad, total, positiveFeedback}) => {\n    \n    return(\n    <ul>\n        <li>Good: {good}</li>\n        <li>Neutral: {neutral}</li>\n        <li>Bad: {bad}</li>\n        <li>Total: {total}</li>\n        <li>Positive feedback: {positiveFeedback}%</li>\n    </ul>\n    )\n    \n}\n\nexport default Statistics","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst FeedbackOptions = ({options,onLeaveFeedback}) => {\n        \n    return (<>\n        {options.map((option) => (\n            <button name={option.name} key={option.key} onClick={onLeaveFeedback}>\n                {option.name}\n            </button>\n        ))}\n    </>)\n    \n}\n\nFeedbackOptions.propTypes ={\n    options: PropTypes.arrayOf(PropTypes.object),\n    onLeaveFeedback: PropTypes.func\n    \n}\n\nexport default FeedbackOptions","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Section = ({title,children}) =>{\n    return(\n        <>\n        <h2>{title}</h2>\n        {children}\n        </>\n    )\n}\n\nSection.propTypes = {\n    title: PropTypes.string,\n    children: PropTypes.element.isRequired\n\n}\n\nexport default Section","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({message}) =>{\n    return(\n        <h3>{message}</h3>\n    )\n}\n\nNotification.propTypes = {\n    message: PropTypes.string\n}\n\nexport default Notification;","import React from 'react';\nimport Statistics from '../Statistics';\nimport FeedbackOptions from '../FeedbackOptions';\nimport Section from '../Section';\nimport Notification from '../Notification';\n\n\nexport default class Feedback extends React.Component{\n\n    \n        state = {\n            good: 0,\n            neutral: 0,\n            bad: 0, \n            total:0,\n            positiveFeedback:0        \n        }\n    \n\n    \n\n    handleClick = e => {\n        e.preventDefault()\n        const {name} = e.target\n        this.setState({[name]:this.state[name]+1}, this.countTotalFeedback)\n        \n    }\n\n\n    countTotalFeedback(){\n        const {good, neutral, bad} = this.state;\n        const total = good + neutral+ bad;\n       \n        this.setState({total: total}, this.countPositiveFeedbackPercentage);\n        \n    }\n\n    countPositiveFeedbackPercentage(){\n        const {good, total} = this.state\n        this.setState({positiveFeedback: (good/total*100).toFixed(0)})\n    }\n\n    render(){\n\n        const options = [\n        {\n        name: 'good' ,\n        key : 0\n        }, \n        {\n        name: 'neutral',\n        key:1\n        }, \n        {\n        name:'bad',\n        key:2\n        }, \n        ]\n\n        return (\n            <div className='feedback'>\n            <Section title='Please leave your feedback'>\n                <FeedbackOptions options={options} onLeaveFeedback={this.handleClick}/>  \n            </Section>  \n\n            <Section title='Statistics'>     \n            { this.state.total > 0 ?                 \n            <Statistics\n                    good = {this.state.good}\n                    neutral = {this.state.neutral}\n                    bad = {this.state.bad}\n                    total = {this.state.total}\n                    positiveFeedback = {this.state.positiveFeedback}\n                    /> :\n                    <Notification message=\"No feedback given\"></Notification>\n                    \n            }\n            </Section>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport Feedback from './components/Feedback'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Feedback/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}